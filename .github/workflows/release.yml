build_and_upload:
  needs: create_release
  runs-on: ubuntu-latest
  strategy:
    matrix:
      include:
        - goos: windows
          goarch: amd64
        - goos: windows
          goarch: arm64
        - goos: darwin
          goarch: amd64
        - goos: darwin
          goarch: arm64
        - goos: linux
          goarch: amd64
        - goos: linux
          goarch: arm64
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
        check-latest: true
    - name: Install UPX
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl
    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      id: build
      run: |
        output_name="go-encryption-${{ needs.create_release.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          output_name+='.exe'
        fi
        CGO_ENABLED=0 go build -a -ldflags '-extldflags "-static" -s -w' -o "$output_name" .
        echo "ASSET_NAME=$output_name" >> $GITHUB_OUTPUT
    - name: Compress binary with UPX
      if: !(matrix.goos == 'windows' && matrix.goarch == 'arm64') # Skip for windows/arm64
      run: upx --best --lzma "${{ steps.build.outputs.ASSET_NAME }}"
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ needs.create_release.outputs.version }} ${{ steps.build.outputs.ASSET_NAME }}
